=======================================
hit_miss_test.vhd
=======================================


library IEEE;
library std;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_textio.all;
use STD.textio.all;
use std.env.all;

entity hit_miss_test is

end hit_miss_test;

architecture test of hit_miss_test is

component hit_miss
  port (
	input1 : in std_logic_vector(2 downto 0);
	input2 : in std_logic_vector(2 downto 0);
	valid  : in std_logic;
	output : out std_logic);
end component;

for hit_miss_temp : hit_miss use entity work.hit_miss(structural);

signal in1, in2 : std_logic_vector(2 downto 0);
signal v1, out1 : std_logic;
	
begin
	

	hit_miss_temp : hit_miss port map(in1, in2, v1, out1);

io_process: process

	file infile : text is in "hit_miss_in.txt";
	file outfile : text is out "hit_miss_out.txt";
	variable Input1, Input2 : std_logic_vector(2 downto 0);
	variable Valid1, Output1 : std_logic;
	variable buf : line;

begin 


	while not (endfile(infile)) loop

	
		readline(infile, buf);
		read (buf, Input1);
		in1 <= Input1;
		
		readline(infile, buf);
		read(buf, Input2);
		in2 <= Input2;
		
		readline(infile, buf);
		read(buf, Valid1);
		v1 <= Valid1;

		wait for 10 ns;
		
		Output1:=out1;
		
		write(buf, string'(" Input 1: "));
		write(buf, in1);
		write(buf, string'(" Input 2: "));
		write(buf, in2);
		write(buf, string'(" Valid: "));
		write(buf, v1);
		writeline(outfile,buf);

		write(buf, string'(" Output: "));
		write(buf, Output1);
		writeline(outfile,buf);
		writeline(outfile,buf);

	end loop;
	stop(0);
	
end process io_process;

end test;=======================================
Dlatch_test.vhd
=======================================


library IEEE;
library std;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_textio.all;
use STD.textio.all;
use std.env.all;

entity Dlatch_test is

end Dlatch_test;

architecture test of Dlatch_test is

component Dlatch                       
  port ( d   : in  std_logic;
         clk : in  std_logic;
         q   : out std_logic;
         qbar: out std_logic); 
end component; 

for Dlatch_temp : Dlatch use entity work.Dlatch(structural);

signal d_1, clk_1, q_1, q_bar_1 : std_logic;

begin
	

	Dlatch_temp : Dlatch port map(d_1, clk_1, q_1, q_bar_1);

io_process: process

	file infile : text is in "Dlatch_in.txt";
	file outfile : text is out "Dlatch_out.txt";
	variable Input1 : std_logic_vector(1 downto 0);
	variable q_2, q_bar_2 : std_logic;
	variable buf : line;

begin 


	while not (endfile(infile)) loop

	
		readline(infile, buf);
		read (buf, Input1);
		d_1 <= Input1(0);
		clk_1 <= Input1(1);
		
		wait for 10 ns;
		
		q_2:=q_1;
		q_bar_2:=q_bar_1;
		
		write(buf, string'(" D: "));
		write(buf, d_1);
		write(buf, string'(" CLK: "));
		write(buf, clk_1);
		writeline(outfile, buf);

		write(buf, string'(" Q: "));
		write(buf, q_2);
		write(buf, string'(" ~Q: "));
		write(buf, q_bar_2);
		
		writeline(outfile,buf);
		writeline(outfile,buf);

	end loop;
	stop(0);
	
end process io_process;

end test;=======================================
cache_bit_test.vhd
=======================================


library IEEE;
library std;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_textio.all;
use STD.textio.all;
use std.env.all;

entity cache_bit_test is

end cache_bit_test;

architecture test of cache_bit_test is

component cache_bit
  port (
    Reset      :  in std_logic;
    Write_data :  in std_logic;
    Write_en   :  in std_logic;
    Read_en    :  in std_logic;
    Read_data  :  out std_logic);
end component;

for cache_bit_temp : cache_bit use entity work.cache_bit(structural);

signal reset, wen, wdata, ren, rdata : std_logic;
	
begin
	

	cache_bit_temp : cache_bit port map(reset, wdata, wen, ren, rdata);

io_process: process

	file infile : text is in "cache_bit_in.txt";
	file outfile : text is out "cache_bit_out.txt";
	variable Input1 : std_logic_vector(3 downto 0);
	--variable Valid1, Output1 : std_logic;
	variable buf : line;

begin 


	while not (endfile(infile)) loop

	
		readline(infile, buf);
		read (buf, Input1);
		reset <= Input1(3);
		wdata <= Input1(2);
		wen <= Input1(1);
		ren <= Input1(0);

		wait for 10 ns;

		
		write(buf, string'(" Reset: "));
		write(buf, reset);
		write(buf, string'(" Write Data: "));
		write(buf, wdata);
		write(buf, string'(" Write Enable: "));
		write(buf, wen);
		write(buf, string'(" Read Enable: "));
		write(buf, ren);
		writeline(outfile, buf);

		write(buf, string'(" Read Data: "));
		write(buf, rdata);
		
		writeline(outfile,buf);
		writeline(outfile,buf);

	end loop;
	stop(0);
	
end process io_process;

end test;=======================================
cache_byte_test.vhd
=======================================


library IEEE;
library std;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_textio.all;
use STD.textio.all;
use std.env.all;

entity cache_byte_test is

end cache_byte_test;

architecture test of cache_byte_test is

component cache_byte
  port (
  	Reset      :  in std_logic;
    Write_data :  in std_logic_vector(7 downto 0);
    Write_en   :  in std_logic;
    Read_en    :  in std_logic; 
    Read_data  :  out std_logic_vector(7 downto 0));
end component;

for cache_byte_temp : cache_byte use entity work.cache_byte(structural);

signal reset, wen, ren : std_logic;
signal wdata, rdata : std_logic_vector(7 downto 0);
	
begin
	

	cache_byte_temp : cache_byte port map(reset, wdata, wen, ren, rdata);

io_process: process

	file infile : text is in "cache_byte_in.txt";
	file outfile : text is out "cache_byte_out.txt";
	variable Input1 : std_logic_vector(2 downto 0);
	variable Input2 : std_logic_vector(7 downto 0);
	variable buf : line;

begin 


	while not (endfile(infile)) loop

	
		readline(infile, buf);
		read (buf, Input1);
		reset <= Input1(2);
		wen <= Input1(1);
		ren <= Input1(0);
		
		readline(infile, buf);
		read (buf, Input2);
		wdata <= Input2;
		

		wait for 10 ns;

		
		write(buf, string'(" Reset: "));
		write(buf, reset);
		write(buf, string'(" Write Data: "));
		write(buf, wdata);
		write(buf, string'(" Write Endable: "));
		write(buf, wen);
		write(buf, string'(" Read Enable: "));
		write(buf, ren);
		writeline(outfile, buf);

		write(buf, string'(" Read Data: "));
		write(buf, rdata);
		
		writeline(outfile,buf);
		writeline(outfile,buf);

	end loop;
	stop(0);
	
end process io_process;

end test;=======================================
valid_tag_test.vhd
=======================================


library IEEE;
library std;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_textio.all;
use STD.textio.all;
use std.env.all;

entity valid_tag_test is

end valid_tag_test;

architecture test of valid_tag_test is

component Valid_tag
  port (
    Reset      :  in std_logic;
    Write_data :  in std_logic_vector(2 downto 0);
    Valid_data :  in std_logic;
    Write_en   :  in std_logic;
    Read_en    :  in std_logic;
    Read_valid_data : out std_logic;
    Read_tag_data  :  out std_logic_vector(2 downto 0));
end component;

for valid_tag_temp : valid_tag use entity work.valid_tag(structural);

signal reset, wen, ren, wvdata, rvdata : std_logic;
signal wtdata, rtdata : std_logic_vector(2 downto 0); --write/read tag data
	
begin
	

	valid_tag_temp : valid_tag port map(reset, wtdata, wvdata, wen, ren, rvdata, rtdata);

io_process: process

	file infile : text is in "valid_tag_in.txt";
	file outfile : text is out "valid_tag_out.txt";
	variable Input1 : std_logic_vector(2 downto 0);
	variable Input2 : std_logic;
	variable buf : line;

begin 


	while not (endfile(infile)) loop

	
		readline(infile, buf);
		read (buf, Input1);
		reset <= Input1(2);
		wen <= Input1(1);
		ren <= Input1(0);
		
		readline(infile, buf);
		read(buf, Input1);
		wtdata <= Input1;
		
		readline(infile, buf);
		read (buf, Input2);
		wvdata <= Input2;
		

		wait for 10 ns;

		
		write(buf, string'(" Reset: "));
		write(buf, reset);
		write(buf, string'(" Write Endable: "));
		write(buf, wen);
		write(buf, string'(" Read Enable: "));
		write(buf, ren);
		write(buf, string'(" Write Tag Data: "));
		write(buf, wtdata);
		write(buf, string'(" Write Valid Data: "));
		write(buf, wvdata);
		writeline(outfile, buf);

		write(buf, string'(" Read Valid Data: "));
		write(buf, rvdata);
		write(buf, string'(" Read Tag Data: "));
		write(buf, rtdata);
		
		writeline(outfile,buf);
		writeline(outfile,buf);

	end loop;
	stop(0);
	
end process io_process;

end test;=======================================
multiplex4_1_test.vhd
=======================================


library IEEE;
library std;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_textio.all;
use STD.textio.all;
use std.env.all;

entity multiplex4_1_test is

end multiplex4_1_test;

architecture test of multiplex4_1_test is

component multiplex4_1
	port (
		input0 :  in std_logic_vector(7 downto 0);  
    	input1 :  in std_logic_vector(7 downto 0);
    	input2 :  in std_logic_vector(7 downto 0);
    	input3 :  in std_logic_vector(7 downto 0);
		en     :  in std_logic_vector(3 downto 0);
    	output :  out std_logic_vector(7 downto 0)
		);
end component;

for multiplex4_1_temp : multiplex4_1 use entity work.multiplex4_1(structural);

signal in0, in1, in2, in3, out0 : std_logic_vector(7 downto 0);
signal en : std_logic_vector(3 downto 0);
	
begin
	

	multiplex4_1_temp : multiplex4_1 port map(in0, in1, in2, in3, en, out0);

io_process: process

	file infile : text is in "multiplex4_1_in.txt";
	file outfile : text is out "multiplex4_1_out.txt";
	variable Input1 : std_logic_vector(7 downto 0);
	variable Input2 : std_logic_vector(3 downto 0);
	variable buf : line;

begin 

	readline(infile, buf);
	read (buf, Input1);
	in0 <= Input1;
	readline(infile, buf);
	read (buf, Input1);
	in1 <= Input1;
	readline(infile, buf);
	read (buf, Input1);
	in2 <= Input1;
	readline(infile, buf);
	read (buf, Input1);
	in3 <= Input1;
	


	while not (endfile(infile)) loop

	
		readline(infile, buf);
		read (buf, Input2);
		en <= Input2;

		wait for 10 ns;

		
		write(buf, string'(" In0: "));
		write(buf, in0);
		write(buf, string'(" In0: "));
		write(buf, in1);
		write(buf, string'(" In0: "));
		write(buf, in2);
		write(buf, string'(" In0: "));
		write(buf, in3);
		writeline(outfile, buf);

		write(buf, string'(" En: "));
		write(buf, en);
		write(buf, string'(" Output: "));
		write(buf, out0);
		
		writeline(outfile,buf);
		writeline(outfile,buf);

	end loop;
	stop(0);
	
end process io_process;

end test;=======================================
cache_block_test.vhd
=======================================


library IEEE;
library std;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_textio.all;
use STD.textio.all;
use std.env.all;

entity cache_block_test is

end cache_block_test;

architecture test of cache_block_test is

component cache_block
  port (
  	Reset      :  in std_logic;
    Write_data :  in std_logic_vector(7 downto 0);
    Ca_tag     :  in std_logic_vector(2 downto 0);
    Valid_data :  in std_logic;
    Byte_Enable:  in std_logic_vector(3 downto 0);
    Block_Enable: in std_logic;
    Write_en   :  in std_logic;
    Read_en    :  in std_logic;
    Read_valid_data : out std_logic;
    Read_tag_data  :  out std_logic_vector(2 downto 0);
    Read_data  :  out std_logic_vector(7 downto 0));
end component;


for cache_block_temp : cache_block use entity work.cache_block(structural);

-- Inputs
signal reset, wen, ren : std_logic;
signal wvdata, blocken : std_logic;
signal wdata  : std_logic_vector(7 downto 0);
signal wtdata : std_logic_vector(2 downto 0);
signal byteen : std_logic_vector(3 downto 0);
-- Outputs
signal rtdata : std_logic_vector(2 downto 0);
signal rvdata : std_logic;
signal rdata  : std_logic_vector(7 downto 0);
	
begin
	

	cache_block_temp : cache_block port map(reset, wdata, wtdata, wvdata, byteen, blocken, wen, ren, rvdata, rtdata, rdata);

io_process: process

	file infile : text is in "cache_block_in.txt";
	file outfile : text is out "cache_block_out.txt";
	variable Input1 : std_logic_vector(3 downto 0);
	variable Input2 : std_logic_vector(7 downto 0);
	variable Input3 : std_logic_vector(2 downto 0);
	variable Input4 : std_logic;
	--variable temp : std_logic_vector(19 downto 0);
	
	variable buf : line;

begin 


	while not (endfile(infile)) loop

	
		readline(infile, buf);
		read (buf, Input1);
		reset <= Input1(3);
		wen <= Input1(2);
		ren <= Input1(1);
		blocken <= Input1(0);
		
		readline(infile, buf);
		read (buf, Input1);
		byteen <= Input1;
		
		readline(infile, buf);
		read (buf, Input2);
		wdata <= Input2;
		
		readline(infile, buf);
		read (buf, Input3);
		wtdata <= Input3;
		
		readline(infile, buf);
		read (buf, Input4);
		wvdata <= Input4;

		wait for 20 ns;
		
		--wen <= '0';
		
		--wait for 40 ns;
		
		
		write(buf, string'(" Reset: "));
		write(buf, reset);
		write(buf, string'(" Write Enable: "));
		write(buf, wen);
		write(buf, string'(" Read Enable: "));
		write(buf, ren);
		write(buf, string'(" Block Enable: "));
		write(buf, blocken);
		writeline(outfile, buf);
		
		write(buf, string'(" Byte Enable: "));
		write(buf, byteen);
		write(buf, string'(" Write Data: "));
		write(buf, wdata);
		write(buf, string'(" Write Tag Data: "));
		write(buf, wtdata);
		write(buf, string'(" Write Valid Data: "));
		write(buf, wvdata);
		writeline(outfile, buf);

		write(buf, string'(" Read Data: "));
		write(buf, rdata);
		write(buf, string'(" Read Tag Data: "));
		write(buf, rtdata);
		write(buf, string'(" Read Valid Data: "));
		write(buf, rvdata);
		
		writeline(outfile,buf);
		writeline(outfile,buf);

	end loop;
	stop(0);
	
end process io_process;

end test;=======================================
Byte_Decoder_test.vhd
=======================================


library IEEE;
library std;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_textio.all;
use STD.textio.all;
use std.env.all;

entity Byte_Decoder_test is

end Byte_Decoder_test;

architecture test of Byte_Decoder_test is

component Byte_Decoder
  port (
    Byte_Offset  : in std_logic_vector(1 downto 0);
	Output 		 : out std_logic_vector(3 downto 0));
end component;


for Byte_Decoder_temp : Byte_Decoder use entity work.Byte_Decoder(structural);

signal offset : std_logic_vector(1 downto 0);
signal out1   : std_logic_vector(3 downto 0);
	
begin
	

	Byte_Decoder_temp : Byte_Decoder port map(offset, out1);

io_process: process

	file infile : text is in "Byte_Decoder_in.txt";
	file outfile : text is out "Byte_Decoder_out.txt";
	variable Input1 : std_logic_vector(1 downto 0);
	variable buf : line;

begin 


	while not (endfile(infile)) loop

	
		readline(infile, buf);
		read (buf, Input1);
		offset <= Input1;

		wait for 10 ns;

		
		write(buf, string'(" Offset: "));
		write(buf, offset);
		writeline(outfile, buf);

		write(buf, string'(" Output: "));
		write(buf, out1);
		
		writeline(outfile,buf);
		writeline(outfile,buf);

	end loop;
	stop(0);
	
end process io_process;

end test;=======================================
Block_Decoder_test.vhd
=======================================


library IEEE;
library std;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_textio.all;
use STD.textio.all;
use std.env.all;

entity Block_Decoder_test is

end Block_Decoder_test;

architecture test of Block_Decoder_test is

component Block_Decoder 
  port (
    Block_Offset : in std_logic_vector(2 downto 0);
	Output 		 : out std_logic_vector(7 downto 0));
end component;


for Block_Decoder_temp : Block_Decoder use entity work.Block_Decoder(structural);

signal offset : std_logic_vector(2 downto 0);
signal out1   : std_logic_vector(7 downto 0);
	
begin
	

	Block_Decoder_temp : Block_Decoder port map(offset, out1);

io_process: process

	file infile : text is in "Block_Decoder_in.txt";
	file outfile : text is out "Block_Decoder_out.txt";
	variable Input1 : std_logic_vector(2 downto 0);
	variable buf : line;

begin 


	while not (endfile(infile)) loop

		readline(infile, buf);
		read (buf, Input1);
		offset <= Input1;

		wait for 10 ns;

		
		write(buf, string'(" Offset: "));
		write(buf, offset);
		writeline(outfile, buf);

		write(buf, string'(" Output: "));
		write(buf, out1);
		
		writeline(outfile,buf);
		writeline(outfile,buf);

	end loop;
	stop(0);
	
end process io_process;

end test;=======================================
shift_reg20_test.vhd
=======================================


library IEEE;
library std;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_textio.all;
use STD.textio.all;
use std.env.all;

entity shift_reg20_test is

end shift_reg20_test;

architecture test of shift_reg20_test is

component shift_reg20 
	port (
		reset	:  in std_logic;
		clk		:  in std_logic;
		q		:  out std_logic_vector(19 downto 0);
		qbar	:  out std_logic_vector(19 downto 0));
end component;

for shift_reg20_temp : shift_reg20 use entity work.shift_reg20(structural);

signal q, qbar : std_logic_vector(19 downto 0);
signal reset, clk : std_logic;
	
begin
	

	shift_reg20_temp : shift_reg20 port map(reset, clk, q, qbar);

io_process: process

	file infile : text is in "shift_reg20_in.txt";
	file outfile : text is out "shift_reg20_out.txt";
	variable Input1 : std_logic_vector(1 downto 0);
	variable buf : line;

begin 


	while not (endfile(infile)) loop

	
		readline(infile, buf);
		read (buf, Input1);
		clk <= Input1(1);
		reset <= Input1(0);

		wait for 10 ns;
		
		write(buf, string'(" Reset: "));
		write(buf, reset);
		write(buf, string'(" CLK: "));
		write(buf, clk);
		writeline(outfile,buf);

		write(buf, string'(" Q: "));
		write(buf, q);
		write(buf, string'(" ~Q: "));
		write(buf, qbar);
		writeline(outfile,buf);
		writeline(outfile,buf);
		

		

	end loop;
	stop(0);
	
end process io_process;

end test;=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
=======================================
